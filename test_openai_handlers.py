#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI handlers
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_openai_handlers():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è OpenAI handlers"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–±–µ–∑ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∞)
        from repositories.sqlite_repo import init_db
        await init_db()
        
        from repositories.sqlite_repo import (
            SQLiteUserRepository,
            SQLiteContextRepository,
            SQLiteSettingsRepository
        )
        # from services import UserService, OpenAIService
        from services import OpenAIService
        from services.settings_service import SettingsService
        # from bot.handlers.openai_handlers import OpenAICommandHandler
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        user_repo = SQLiteUserRepository()
        context_repo = SQLiteContextRepository()
        settings_repo = SQLiteSettingsRepository()
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        # user_service = UserService(user_repo, context_repo)
        settings_service = SettingsService(settings_repo, user_repo, context_repo)
        openai_service = OpenAIService(settings_service)
        
        # print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ OpenAI handler...")
        # openai_handler = OpenAICommandHandler(
        #     user_service,
        #     openai_service,
        #     settings_service
        # )
        
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...")
        status = openai_service.get_connection_status()
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(test_openai_handlers())
    if result:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)
