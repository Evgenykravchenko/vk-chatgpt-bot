"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É
"""
from typing import List, Dict, Any
from datetime import datetime

from repositories.base import BaseAccessControlRepository
from repositories.models import AccessControl
from config.settings import settings


class AccessControlService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É"""

    def __init__(self, access_repo: BaseAccessControlRepository):
        self.access_repo = access_repo
        self._access_control = None  # –ö—ç—à

    async def _get_access_control(self) -> AccessControl:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
        if self._access_control is None:
            self._access_control = await self.access_repo.get_access_control()
            if self._access_control is None:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self._access_control = AccessControl()
                await self.access_repo.save_access_control(self._access_control)
        return self._access_control

    async def _save_access_control(self, access_control: AccessControl) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
        self._access_control = access_control
        await self.access_repo.save_access_control(access_control)

    async def check_user_access(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω
        """
        access_control = await self._get_access_control()
        return access_control.is_user_allowed(user_id, settings.admin_user_id)

    async def get_access_mode(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞"""
        access_control = await self._get_access_control()
        return access_control.mode

    async def set_access_mode(self, mode: str, admin_id: int) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞

        Args:
            mode: –†–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞ ("public", "whitelist", "admin_only")
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if mode not in ["public", "whitelist", "admin_only"]:
            return False

        if not self._is_admin(admin_id):
            return False

        access_control = await self._get_access_control()
        old_mode = access_control.mode
        access_control.mode = mode

        await self._save_access_control(access_control)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await self._add_to_history(f"–†–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞ –∏–∑–º–µ–Ω–µ–Ω —Å {old_mode} –Ω–∞ {mode}", admin_id)

        return True

    async def _add_to_history(self, action: str, admin_id: int) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        record = {
            "timestamp": datetime.now(),
            "action": action,
            "admin_id": admin_id
        }
        await self.access_repo.add_access_history_record(record)

    async def add_user_to_whitelist(self, user_id: int, admin_id: int) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω
        """
        if not self._is_admin(admin_id):
            return False

        access_control = await self._get_access_control()

        if user_id in access_control.whitelist:
            return False  # –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ

        access_control.add_to_whitelist(user_id)
        await self._save_access_control(access_control)
        await self._add_to_history(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", admin_id)

        return True

    async def remove_user_from_whitelist(self, user_id: int, admin_id: int) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω
        """
        if not self._is_admin(admin_id):
            return False

        access_control = await self._get_access_control()

        if user_id not in access_control.whitelist:
            return False  # –ù–µ –≤ —Å–ø–∏—Å–∫–µ

        access_control.remove_from_whitelist(user_id)
        await self._save_access_control(access_control)
        await self._add_to_history(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞", admin_id)

        return True

    async def add_user_to_blacklist(self, user_id: int, admin_id: int) -> bool:
        """
        –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        if not self._is_admin(admin_id):
            return False

        if user_id == admin_id:
            return False  # –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞

        access_control = await self._get_access_control()
        access_control.add_to_blacklist(user_id)
        await self._save_access_control(access_control)
        await self._add_to_history(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", admin_id)

        return True

    async def remove_user_from_blacklist(self, user_id: int, admin_id: int) -> bool:
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        if not self._is_admin(admin_id):
            return False

        access_control = await self._get_access_control()
        access_control.remove_from_blacklist(user_id)
        await self._save_access_control(access_control)
        await self._add_to_history(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", admin_id)

        return True

    async def get_whitelist(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        access_control = await self._get_access_control()
        return access_control.whitelist.copy()

    async def get_blacklist(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        access_control = await self._get_access_control()
        return access_control.blacklist.copy()

    async def get_access_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        access_control = await self._get_access_control()
        history = await self.access_repo.get_access_history(10)

        return {
            "mode": access_control.mode,
            "whitelist_count": len(access_control.whitelist),
            "blacklist_count": len(access_control.blacklist),
            "whitelist_users": access_control.whitelist,
            "blacklist_users": access_control.blacklist,
            "history_count": len(history)
        }

    async def get_access_info_text(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–æ—Å—Ç—É–ø–∞

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        mode_names = {
            "public": "üåê –û—Ç–∫—Ä—ã—Ç—ã–π (–¥–ª—è –≤—Å–µ—Ö)",
            "whitelist": "üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫",
            "admin_only": "üë§ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }

        stats = await self.get_access_stats()

        text = f"""üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞:

üéØ –†–µ–∂–∏–º: {mode_names.get(stats['mode'], stats['mode'])}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: {stats['whitelist_count']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['blacklist_count']}
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {stats['history_count']}"""

        if stats['mode'] == 'whitelist' and stats['whitelist_count'] > 0:
            text += "\n\nüìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\n"
            for user_id in stats['whitelist_users'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                text += f"‚Ä¢ {user_id}\n"

            if stats['whitelist_count'] > 10:
                text += f"‚Ä¢ ... –∏ –µ—â–µ {stats['whitelist_count'] - 10}\n"

        return text

    async def get_access_history(self, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞

        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        """
        return await self.access_repo.get_access_history(limit)

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return settings.admin_user_id is not None and user_id == settings.admin_user_id

    async def get_access_denied_message(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        access_control = await self._get_access_control()
        return access_control.get_access_denied_message(user_id, settings.admin_user_id)

    async def update_access_messages(
        self,
        admin_id: int,
        whitelist_msg: str = None,
        admin_only_msg: str = None,
        blocked_msg: str = None
    ) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞

        Args:
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            whitelist_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
            admin_only_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ "—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω"
            blocked_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        """
        if not self._is_admin(admin_id):
            return False

        access_control = await self._get_access_control()

        if whitelist_msg:
            access_control.whitelist_message = whitelist_msg
        if admin_only_msg:
            access_control.admin_only_message = admin_only_msg
        if blocked_msg:
            access_control.blocked_message = blocked_msg

        await self._save_access_control(access_control)
        await self._add_to_history("–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", admin_id)

        return True
