"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
"""
from dataclasses import dataclass, field
from datetime import datetime
from typing import List, Dict, Any, Optional
from enum import Enum


class MessageRole(Enum):
    """–†–æ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ"""
    USER = "user"
    ASSISTANT = "assistant"
    SYSTEM = "system"


@dataclass
class Message:
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
    role: MessageRole
    content: str
    timestamp: datetime = field(default_factory=datetime.now)

    def to_openai_format(self) -> Dict[str, str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI API"""
        return {
            "role": self.role.value,
            "content": self.content
        }

    def to_dict(self) -> Dict[str, str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "role": self.role.value,
            "content": self.content,
            "timestamp": self.timestamp.isoformat()
        }


@dataclass
class UserProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None

    # –õ–∏–º–∏—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    requests_limit: int = 50
    requests_used: int = 0

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at: datetime = field(default_factory=datetime.now)
    last_activity: datetime = field(default_factory=datetime.now)
    is_active: bool = True

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    preferred_language: str = "ru"

    @property
    def requests_remaining(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return max(0, self.requests_limit - self.requests_used)

    @property
    def can_make_request(self) -> bool:
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã"""
        return self.requests_remaining > 0 and self.is_active

    @property
    def display_name(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.first_name and self.last_name:
            return f"{self.first_name} {self.last_name}"
        elif self.first_name:
            return self.first_name
        elif self.username:
            return f"@{self.username}"
        else:
            return f"User {self.user_id}"


@dataclass
class UserContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    user_id: int
    messages: List[Message] = field(default_factory=list)
    max_messages: int = 10

    def add_message(self, role: MessageRole, content: str) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        message = Message(role=role, content=content)
        self.messages.append(message)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(self.messages) > self.max_messages:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
            system_messages = [msg for msg in self.messages if msg.role == MessageRole.SYSTEM]
            other_messages = [msg for msg in self.messages if msg.role != MessageRole.SYSTEM]

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            recent_messages = other_messages[-(self.max_messages - len(system_messages)):]

            self.messages = system_messages + recent_messages

    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.messages.clear()

    def to_openai_format(self) -> List[Dict[str, str]]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI API"""
        return [msg.to_openai_format() for msg in self.messages]

    @property
    def message_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        return len(self.messages)


@dataclass
class BotSettings:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    default_user_limit: int = 50
    context_size: int = 10
    openai_model: str = "gpt-3.5-turbo"

    # OpenAI Connection –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    openai_use_proxy: bool = False
    openai_proxy_url: str = "https://openai-proxy-vercel-kohl.vercel.app"
    openai_proxy_key: str = ""

    # System –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    rate_limit_enabled: bool = True
    rate_limit_calls: int = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    rate_limit_period: int = 60  # –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    maintenance_mode: bool = False
    welcome_message: str = "–ü—Ä–∏–≤–µ—Ç! –Ø AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!"

    # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    whitelist_enabled: bool = False  # –í–∫–ª—é—á–µ–Ω –ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    allowed_users: List[int] = field(default_factory=list)  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    access_mode: str = "public"  # "public", "whitelist", "admin_only"

    updated_at: datetime = field(default_factory=datetime.now)

    def update_setting(self, setting_name: str, value: Any) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        if hasattr(self, setting_name):
            setattr(self, setting_name, value)
            self.updated_at = datetime.now()
            return True
        return False

    def get_settings_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        connection_type = "üîÑ –ü—Ä–æ–∫—Å–∏" if self.openai_use_proxy else "üîó –ü—Ä—è–º–æ–µ"
        proxy_info = f" ({self.openai_proxy_url})" if self.openai_use_proxy else ""

        return f"""‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:

ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.context_size} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –õ–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.default_user_limit} –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ú–æ–¥–µ–ª—å OpenAI: {self.openai_model}
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {connection_type}{proxy_info}
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if self.welcome_message != "–ü—Ä–∏–≤–µ—Ç! –Ø AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!" else "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"}

‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ Rate limiting: {"–í–∫–ª—é—á–µ–Ω" if self.rate_limit_enabled else "–û—Ç–∫–ª—é—á–µ–Ω"}
‚Ä¢ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {self.rate_limit_calls} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {self.rate_limit_period} —Å–µ–∫
‚Ä¢ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω" if self.maintenance_mode else "–û—Ç–∫–ª—é—á–µ–Ω"}

üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.updated_at.strftime('%d.%m.%Y %H:%M')}"""

    def get_openai_connection_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ OpenAI"""
        if self.openai_use_proxy:
            return f"""üîÑ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:

üåê –ü—Ä–æ–∫—Å–∏ URL: {self.openai_proxy_url}
üîë –ü—Ä–æ–∫—Å–∏ –∫–ª—é—á: {"–ù–∞—Å—Ç—Ä–æ–µ–Ω" if self.openai_proxy_key else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
üéØ –ú–æ–¥–µ–ª—å: {self.openai_model}

üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        else:
            return f"""üîó OpenAI –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:

üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç: https://api.openai.com/v1
üéØ –ú–æ–¥–µ–ª—å: {self.openai_model}

üí° –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API OpenAI."""

    def reset_to_defaults(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ config –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
        try:
            from config.settings import settings
            self.default_user_limit = settings.default_user_limit
            self.context_size = settings.context_size
            self.openai_model = settings.openai_model
            self.rate_limit_calls = settings.rate_limit_calls
            self.rate_limit_period = settings.rate_limit_period
            self.openai_use_proxy = settings.openai_use_proxy
            self.openai_proxy_url = settings.openai_proxy_url
            self.openai_proxy_key = settings.openai_proxy_key or ""
        except ImportError:
            # –•–∞—Ä–¥–∫–æ–¥–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.default_user_limit = 50
            self.context_size = 10
            self.openai_model = "gpt-3.5-turbo"
            self.rate_limit_calls = 5
            self.rate_limit_period = 60
            self.openai_use_proxy = False
            self.openai_proxy_url = "https://openai-proxy-vercel-kohl.vercel.app"
            self.openai_proxy_key = ""

        self.rate_limit_enabled = True
        self.maintenance_mode = False
        self.welcome_message = "–ü—Ä–∏–≤–µ—Ç! –Ø AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!"
        self.updated_at = datetime.now()

    def to_dict(self) -> dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "default_user_limit": self.default_user_limit,
            "context_size": self.context_size,
            "openai_model": self.openai_model,
            "openai_use_proxy": self.openai_use_proxy,
            "openai_proxy_url": self.openai_proxy_url,
            "openai_proxy_key": self.openai_proxy_key,
            "rate_limit_enabled": self.rate_limit_enabled,
            "rate_limit_calls": self.rate_limit_calls,
            "rate_limit_period": self.rate_limit_period,
            "maintenance_mode": self.maintenance_mode,
            "welcome_message": self.welcome_message,
            "whitelist_enabled": self.whitelist_enabled,
            "allowed_users": self.allowed_users,
            "access_mode": self.access_mode,
            "updated_at": self.updated_at.isoformat() if isinstance(self.updated_at, datetime) else self.updated_at
        }

    @classmethod
    def from_dict(cls, data: dict) -> "BotSettings":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º updated_at –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
        if 'updated_at' in data and isinstance(data['updated_at'], str):
            try:
                data['updated_at'] = datetime.fromisoformat(data['updated_at'])
            except ValueError:
                data['updated_at'] = datetime.now()
        elif 'updated_at' not in data:
            data['updated_at'] = datetime.now()

        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ dataclass –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø–∞–ª–∏ –≤ data
        valid_fields = {f.name for f in cls.__dataclass_fields__.values()}
        filtered_data = {k: v for k, v in data.items() if k in valid_fields}

        return cls(**filtered_data)


@dataclass
class AccessControl:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É"""
    mode: str = "public"  # "public", "whitelist", "admin_only"
    whitelist: List[int] = field(default_factory=list)
    blacklist: List[int] = field(default_factory=list)  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    whitelist_message: str = """üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω

–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞.

üì¨ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫

üí° –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    admin_only_message: str = """üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

üõ†Ô∏è –ü—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ  
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã

üì¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

‚è∞ –û–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç—ã –∑–∞–Ω–∏–º–∞—é—Ç –Ω–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç."""

    blocked_message: str = """üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.

üì¨ –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è
‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞

üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."""

    def is_user_allowed(self, user_id: int, admin_id: int = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if user_id in self.blacklist:
            return False

        # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        if admin_id and user_id == admin_id:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞
        if self.mode == "public":
            return True
        elif self.mode == "whitelist":
            return user_id in self.whitelist
        elif self.mode == "admin_only":
            return admin_id and user_id == admin_id

        return False

    def get_access_denied_message(self, user_id: int, admin_id: int = None) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
        if user_id in self.blacklist:
            return self.blocked_message
        elif self.mode == "whitelist":
            return self.whitelist_message
        elif self.mode == "admin_only":
            return self.admin_only_message
        else:
            return self.blocked_message

    def add_to_whitelist(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        if user_id not in self.whitelist:
            self.whitelist.append(user_id)

    def remove_from_whitelist(self, user_id: int) -> None:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if user_id in self.whitelist:
            self.whitelist.remove(user_id)

    def add_to_blacklist(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        if user_id not in self.blacklist:
            self.blacklist.append(user_id)
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            self.remove_from_whitelist(user_id)

    def remove_from_blacklist(self, user_id: int) -> None:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if user_id in self.blacklist:
            self.blacklist.remove(user_id)

    def to_dict(self) -> dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "mode": self.mode,
            "whitelist": self.whitelist,
            "blacklist": self.blacklist,
            "whitelist_message": self.whitelist_message,
            "admin_only_message": self.admin_only_message,
            "blocked_message": self.blocked_message,
        }

    @classmethod
    def from_dict(cls, data: dict) -> "AccessControl":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ dataclass –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø–∞–ª–∏ –≤ data
        valid_fields = {f.name for f in cls.__dataclass_fields__.values()}
        filtered_data = {k: v for k, v in data.items() if k in valid_fields}

        return cls(**filtered_data)