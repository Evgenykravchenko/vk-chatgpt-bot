"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ VK –±–æ—Ç–∞
"""
import json
from typing import Dict, Any, Optional

from services import UserService, OpenAIService, SettingsService
from bot.keyboards import (
    get_main_keyboard,
    get_help_keyboard,
    get_status_keyboard,
    get_admin_keyboard
)


class CommandHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""

    def __init__(self, user_service: UserService, openai_service: OpenAIService, settings_service: SettingsService):
        self.user_service = user_service
        self.openai_service = openai_service
        self.settings_service = settings_service

    async def handle_start(self, user_id: int, user_info: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.user_service.get_or_create_user(
            user_id=user_id,
            first_name=user_info.get('first_name'),
            last_name=user_info.get('last_name')
        )

        welcome_text = f"""ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.display_name}!

–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!

üîπ –£ —Ç–µ–±—è –µ—Å—Ç—å {user.requests_remaining} –∑–∞–ø—Ä–æ—Å–æ–≤
üîπ –Ø –ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {await self._get_context_size()} —Å–æ–æ–±—â–µ–Ω–∏–π
üîπ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É! üòä"""

        return {
            "message": welcome_text,
            "keyboard": get_main_keyboard()
        }

    async def handle_help(self, user_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        help_text = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üî∏ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç –æ—Ç AI
‚Ä¢ "–°—Ç–∞—Ç—É—Å" - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ "–°–±—Ä–æ—Å" - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ "–ü–æ–º–æ—â—å" - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üî∏ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∏–∞–ª–æ–≥

üî∏ **–õ–∏–º–∏—Ç—ã:**
‚Ä¢ –£ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Å–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

üí° **–°–æ–≤–µ—Ç:** –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ!"""

        return {
            "message": help_text,
            "keyboard": get_help_keyboard()
        }

    async def handle_status(self, user_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞"""
        stats = await self.user_service.get_user_stats(user_id)

        if not stats:
            return {
                "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                "keyboard": get_main_keyboard()
            }

        status_text = f"""üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {stats['display_name']}
üî¢ **ID:** {stats['user_id']}

üìà **–ó–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['requests_used']}/{stats['requests_limit']}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {stats['requests_remaining']}

üí¨ **–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {stats['context_messages']}

üìÖ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['created_at'].strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity'].strftime('%d.%m.%Y %H:%M')}

{"üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if stats['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}"""

        return {
            "message": status_text,
            "keyboard": get_status_keyboard()
        }

    async def handle_reset(self, user_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        await self.user_service.clear_user_context(user_id)

        return {
            "message": "üóëÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å —è –Ω–µ –ø–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            "keyboard": get_main_keyboard()
        }

    async def handle_admin_panel(self, user_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        if not await self.user_service.is_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_main_keyboard()
            }

        users = await self.user_service.get_all_users()
        total_users = len(users)
        active_users = len([u for u in users if u.is_active])
        total_requests = sum(u.requests_used for u in users)

        admin_text = f"""‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}

üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤"""

        return {
            "message": admin_text,
            "keyboard": get_admin_keyboard()
        }

    async def handle_users_list(self, user_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.user_service.is_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_main_keyboard()
            }

        users = await self.user_service.get_all_users()

        if not users:
            return {
                "message": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç",
                "keyboard": get_admin_keyboard()
            }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = sorted(
            [u for u in users if u.is_active],
            key=lambda x: x.requests_used,
            reverse=True
        )[:10]

        users_text = "üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"

        for i, user in enumerate(active_users, 1):
            users_text += f"{i}. {user.display_name}\n"
            users_text += f"   üìä {user.requests_used}/{user.requests_limit} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            users_text += f"   üïê {user.last_activity.strftime('%d.%m %H:%M')}\n\n"

        return {
            "message": users_text,
            "keyboard": get_admin_keyboard()
        }

    async def _get_context_size(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        from config.settings import settings
        return settings.context_size

    async def handle_set_context_size(self, user_id: int, new_size_str: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not await self.user_service.is_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_main_keyboard()
            }
        try:
            new_size = int(new_size_str)
            success = await self.settings_service.update_context_size(new_size, user_id)
            if success:
                return {
                    "message": f"‚úÖ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_size}.",
                    "keyboard": get_admin_keyboard()
                }
            else:
                return {
                    "message": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 1 –¥–æ 50.",
                    "keyboard": get_admin_keyboard()
                }
        except ValueError:
            return {
                "message": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                "keyboard": get_admin_keyboard()
            }

    async def handle_set_default_limit(self, user_id: int, new_limit_str: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if not await self.user_service.is_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_main_keyboard()
            }
        try:
            new_limit = int(new_limit_str)
            success = await self.settings_service.update_default_limit(new_limit, user_id)
            if success:
                return {
                    "message": f"‚úÖ –õ–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_limit}.",
                    "keyboard": get_admin_keyboard()
                }
            else:
                return {
                    "message": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 1 –¥–æ 1000.",
                    "keyboard": get_admin_keyboard()
                }
        except ValueError:
            return {
                "message": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                "keyboard": get_admin_keyboard()
            }
