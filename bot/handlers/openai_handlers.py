"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
from typing import Dict, Any
from services import UserService, OpenAIService, SettingsService
from bot.keyboards.inline import (
    get_openai_connection_menu_keyboard,
    get_proxy_settings_keyboard,
    get_openai_input_keyboard,
    get_proxy_examples_keyboard,
    get_admin_keyboard,
)


class OpenAICommandHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenAI"""

    def __init__(self, user_service: UserService, openai_service: OpenAIService, settings_service: SettingsService):
        self.user_service = user_service
        self.openai_service = openai_service
        self.settings_service = settings_service

    async def _check_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return await self.user_service.is_admin(user_id)

    async def handle_openai_connection_menu(self, user_id: int) -> Dict[str, Any]:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è OpenAI"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        status_info = self.openai_service.get_connection_status()
        
        menu_text = f"""üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è OpenAI

üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
‚Ä¢ –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {status_info['connection_type']}
‚Ä¢ –ú–æ–¥–µ–ª—å: {status_info['model']}
‚Ä¢ –≠–Ω–¥–ø–æ–∏–Ω—Ç: {status_info['api_endpoint']}

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä—è–º—ã–º –∏ –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫—Å–∏
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞

üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ OpenAI API."""

        return {
            "message": menu_text,
            "keyboard": get_openai_connection_menu_keyboard()
        }

    async def handle_set_openai_direct(self, user_id: int) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        success, message = await self.openai_service.switch_to_direct()
        
        return {
            "message": f"üîó –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n{message}",
            "keyboard": get_openai_connection_menu_keyboard()
        }

    async def handle_set_openai_proxy(self, user_id: int) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        from config.settings import settings
        
        if not settings.openai_proxy_url or settings.openai_proxy_url == "https://api.openai.com":
            return {
                "message": """üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

‚ùó –ü—Ä–æ–∫—Å–∏ URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. 

–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ URL –ø—Ä–æ–∫—Å–∏ –≤ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏", –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.""",
                "keyboard": get_openai_connection_menu_keyboard()
            }

        success, message = await self.openai_service.switch_to_proxy(
            settings.openai_proxy_url,
            settings.openai_proxy_key
        )
        
        return {
            "message": f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∫—Å–∏\n\n{message}",
            "keyboard": get_openai_connection_menu_keyboard()
        }

    async def handle_test_openai_connection(self, user_id: int) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è OpenAI"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        success, message = await self.openai_service.test_connection()
        
        test_text = f"""üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

{message}

‚ÑπÔ∏è –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."""

        return {
            "message": test_text,
            "keyboard": get_openai_connection_menu_keyboard()
        }

    async def handle_show_openai_status(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è OpenAI"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        status_info = self.openai_service.get_connection_status()
        
        status_icon = "üü¢" if status_info['use_proxy'] else "üîµ"
        
        status_text = f"""üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è OpenAI

{status_icon} –¢–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
‚Ä¢ –¢–∏–ø: {status_info['connection_type']}
‚Ä¢ Base URL: {status_info['base_url']}
‚Ä¢ API Endpoint: {status_info['api_endpoint']}
‚Ä¢ –ú–æ–¥–µ–ª—å: {status_info['model']}

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ü—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω: {"‚úÖ –î–∞" if status_info['use_proxy'] else "‚ùå –ù–µ—Ç"}"""

        if status_info['use_proxy']:
            from config.settings import settings
            status_text += f"\n‚Ä¢ –ü—Ä–æ–∫—Å–∏ URL: {settings.openai_proxy_url}"
            status_text += f"\n‚Ä¢ –ü—Ä–æ–∫—Å–∏ –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if settings.openai_proxy_key else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"

        return {
            "message": status_text,
            "keyboard": get_openai_connection_menu_keyboard()
        }

    async def handle_proxy_settings_menu(self, user_id: int) -> Dict[str, Any]:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        from config.settings import settings
        
        proxy_text = f"""‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏

üåê –¢–µ–∫—É—â–∏–π URL: 
{settings.openai_proxy_url}

üîë API –∫–ª—é—á: 
{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if settings.openai_proxy_key else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É, –Ω–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–∫—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å "üîÑ –ß–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""

        return {
            "message": proxy_text,
            "keyboard": get_proxy_settings_keyboard()
        }

    async def handle_show_proxy_examples(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–∫—Å–∏ URL"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        examples_text = """üí° –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–∫—Å–∏ URL

üöÄ Vercel –ø—Ä–æ–∫—Å–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
https://openai-proxy-vercel-kohl.vercel.app

üåê –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç:
https://your-proxy-domain.com

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://
‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ /v1 –≤ –∫–æ–Ω–µ—Ü - —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenAI API

‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:
‚Ä¢ Vercel deployment - —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Cloudflare Workers - —Ö–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"""

        return {
            "message": examples_text,
            "keyboard": get_proxy_examples_keyboard()
        }

    async def handle_use_vercel_proxy(self, user_id: int) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Vercel –ø—Ä–æ–∫—Å–∏"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        vercel_url = "https://openai-proxy-vercel-kohl.vercel.app"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await self.settings_service.update_proxy_url(vercel_url, user_id)
        
        if success:
            return {
                "message": f"""‚úÖ Vercel –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

üåê URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {vercel_url}

üîß –ß—Ç–æ –¥–∞–ª—å—à–µ:
1. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á
2. –í—ã–±–µ—Ä–∏—Ç–µ "üîÑ –ß–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏" –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

üí° –≠—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ.""",
                "keyboard": get_proxy_settings_keyboard()
            }
        else:
            return {
                "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏",
                "keyboard": get_proxy_settings_keyboard()
            }

    async def handle_edit_proxy_url(self, user_id: int) -> Dict[str, Any]:
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ø—Ä–æ–∫—Å–∏"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        return {
            "message": """üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ URL –ø—Ä–æ–∫—Å–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-proxy.com):

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://
‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ /v1 –≤ –∫–æ–Ω–µ—Ü
‚Ä¢ URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º

üìù –ü—Ä–∏–º–µ—Ä: https://openai-proxy-vercel-kohl.vercel.app""",
            "keyboard": get_openai_input_keyboard(),
            "next_action": "edit_proxy_url_input"
        }

    async def handle_edit_proxy_key(self, user_id: int) -> Dict[str, Any]:
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –ø—Ä–æ–∫—Å–∏"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        return {
            "message": """üîë –ò–∑–º–µ–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á:

üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–≤–æ–∏ –∫–ª—é—á–∏
‚Ä¢ –î—Ä—É–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π OpenAI –∫–ª—é—á
‚Ä¢ –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ "skip" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–ª—é—á""",
            "keyboard": get_openai_input_keyboard(),
            "next_action": "edit_proxy_key_input"
        }

    async def handle_proxy_url_input(self, user_id: int, url: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL –ø—Ä–æ–∫—Å–∏"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        url = url.strip()
        
        if not url.startswith(('http://', 'https://')):
            return {
                "message": "‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://",
                "keyboard": get_openai_input_keyboard(),
                "next_action": "edit_proxy_url_input"
            }

        if url.endswith('/v1'):
            url = url[:-3]  # –£–±–∏—Ä–∞–µ–º /v1 –µ—Å–ª–∏ –µ—Å—Ç—å

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await self.settings_service.update_proxy_url(url, user_id)
        
        if success:
            return {
                "message": f"‚úÖ URL –ø—Ä–æ–∫—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {url}",
                "keyboard": get_proxy_settings_keyboard()
            }
        else:
            return {
                "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å URL –ø—Ä–æ–∫—Å–∏",
                "keyboard": get_proxy_settings_keyboard()
            }

    async def handle_proxy_key_input(self, user_id: int, key: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –ø—Ä–æ–∫—Å–∏"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        key = key.strip()
        
        if key.lower() == "skip":
            return {
                "message": "‚ÑπÔ∏è –ö–ª—é—á –ø—Ä–æ–∫—Å–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω",
                "keyboard": get_proxy_settings_keyboard()
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await self.settings_service.update_proxy_key(key if key else None, user_id)
        
        if success:
            status = "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if key else "–æ—á–∏—â–µ–Ω"
            return {
                "message": f"‚úÖ API –∫–ª—é—á –ø—Ä–æ–∫—Å–∏ {status}",
                "keyboard": get_proxy_settings_keyboard()
            }
        else:
            return {
                "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–∫—Å–∏",
                "keyboard": get_proxy_settings_keyboard()
            }

    async def handle_test_proxy_connection(self, user_id: int) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not await self._check_admin(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": get_admin_keyboard()
            }

        from config.settings import settings
        
        if not settings.openai_proxy_url or settings.openai_proxy_url == "https://api.openai.com":
            return {
                "message": "‚ùå URL –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ URL –ø—Ä–æ–∫—Å–∏.",
                "keyboard": get_proxy_settings_keyboard()
            }

        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        success, message = await self.openai_service.switch_to_proxy(
            settings.openai_proxy_url,
            settings.openai_proxy_key
        )

        test_text = f"""üîç –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–∫—Å–∏: {settings.openai_proxy_url}

{message}

üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ "üîÑ –ß–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é."""

        return {
            "message": test_text,
            "keyboard": get_proxy_settings_keyboard()
        }
