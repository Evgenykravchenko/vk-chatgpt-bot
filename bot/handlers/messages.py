"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π VK –±–æ—Ç–∞
"""
import json
import logging
from typing import Dict, Any, Optional

from services import UserService, OpenAIService
from repositories.models import MessageRole
from bot.keyboards import get_main_keyboard
from bot.middlewares import RateLimitMiddleware

logger = logging.getLogger(__name__)


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(
            self,
            user_service: UserService,
            openai_service: OpenAIService,
            rate_limiter: RateLimitMiddleware
    ):
        self.user_service = user_service
        self.openai_service = openai_service
        self.rate_limiter = rate_limiter

    async def handle_text_message(
            self,
            user_id: int,
            text: str,
            user_info: Dict[str, Any],
            payload: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            payload: –î–∞–Ω–Ω—ã–µ –∏–∑ payload –∫–Ω–æ–ø–∫–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await)
        if await self.rate_limiter.is_rate_limited_async(user_id):
            time_left = await self.rate_limiter.get_time_until_reset_async(user_id)
            return {
                "message": f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {time_left} —Å–µ–∫—É–Ω–¥.",
                "keyboard": get_main_keyboard()
            }

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.user_service.get_or_create_user(
            user_id=user_id,
            first_name=user_info.get('first_name'),
            last_name=user_info.get('last_name')
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.user_service.can_make_request(user_id):
            return {
                "message": "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.",
                "keyboard": get_main_keyboard()
            }

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = await self.user_service.get_user_context(user_id)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await self.user_service.add_message_to_context(
                user_id, MessageRole.USER, text
            )

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            context_messages = context.messages if context else []
            ai_response = await self.openai_service.generate_response_from_context(
                context_messages, text
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await self.user_service.add_message_to_context(
                user_id, MessageRole.ASSISTANT, ai_response
            )

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await self.user_service.use_request(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.user_service.get_user_stats(user_id)
            requests_left = stats['requests_remaining'] if stats else 0

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –∫ –æ—Ç–≤–µ—Ç—É
            footer = f"\n\nüí° –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_left}"

            return {
                "message": ai_response + footer,
                "keyboard": get_main_keyboard()
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}: {e}", exc_info=True)

            return {
                "message": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "keyboard": get_main_keyboard()
            }

    async def handle_button_click(
            self,
            user_id: int,
            payload: Dict[str, Any],
            user_info: Dict[str, Any]
    ) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payload: –î–∞–Ω–Ω—ã–µ –∏–∑ payload –∫–Ω–æ–ø–∫–∏
            user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ None
        """
        command = payload.get("command")

        if not command:
            return None

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
        from .commands import CommandHandler
        command_handler = CommandHandler(self.user_service, self.openai_service)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if command == "main":
            return {
                "message": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                "keyboard": get_main_keyboard()
            }
        elif command == "help":
            return await command_handler.handle_help(user_id)
        elif command == "status":
            return await command_handler.handle_status(user_id)
        elif command == "reset":
            return await command_handler.handle_reset(user_id)
        elif command == "ask":
            return {
                "message": "üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!",
                "keyboard": get_main_keyboard()
            }
        elif command == "users" and await self.user_service.is_admin(user_id):
            return await command_handler.handle_users_list(user_id)
        elif command == "settings" and await self.user_service.is_admin(user_id):
            return await command_handler.handle_admin_panel(user_id)
        elif command == "commands":
            return await command_handler.handle_help(user_id)
        elif command == "about":
            return {
                "message": """ü§ñ –û –±–æ—Ç–µ:

–Ø —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º VK.

üî∏ **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ OpenAI GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üî∏ **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –ö—Ä–∞–≤—á–µ–Ω–∫–æ –ï–≤–≥–µ–Ω–∏–π
üî∏ **–í–µ—Ä—Å–∏—è:** 1.0.0

üíª –ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VK API –∏ OpenAI API.""",
                "keyboard": get_main_keyboard()
            }

        return None

    def extract_payload(self, message_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ payload –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

        Args:
            message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç VK API

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å payload –∏–ª–∏ None
        """
        try:
            payload_str = message_data.get("payload")
            if payload_str:
                return json.loads(payload_str)
        except (json.JSONDecodeError, TypeError):
            pass

        return None
